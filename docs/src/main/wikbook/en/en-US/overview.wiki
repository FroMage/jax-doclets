h1. Overview

jax-doclets allows you to generate [JavaDoc|http://java.sun.com/j2se/javadoc] 
documentation for specific Java annotation-based extensions such as:

* [JAX-RS|https://jsr311.dev.java.net]: the RESTful API for Java
* [JAXB|https://jaxb.dev.java.net]: the XML binding API for Java
* [JPA|http://en.wikipedia.org/wiki/Java_Persistence_API]: the Java Persistence API

The goal of jax-doclets is to let you write documentation for your JAX-RS API, JAXB structures
and JPA model in JavaDoc, where it belongs, where it is maintainable, and produce a quality JavaDoc-style
documentation.

h2. Information
 
jax-doclets is an open-source project maintained by [Lunatech Labs|http://www.lunatech-labs.com].

||Home page|[http://www.lunatech-labs.com/content/jax-doclets]|
||Download|[https://github.com/FroMage/jax-doclets/downloads]|
||Issue Tracker|[https://github.com/FroMage/jax-doclets/issues]|
||Source Control Management|[https://github.com/FroMage/jax-doclets]|

h2. Example

Here is an example of documented JAX-RS and JAXB code:

{example:title=Example of documented JAX-RS and JAXB code}
{code:java}
package com.lunatech.doclets.jax.test;

import javax.ws.rs.*;
import javax.xml.bind.annotation.*;

/**
 * An example JAX-RS resource
 */
@Path("/example")
@Produces( { "application/xml", "application/*+xml" })
public class JAXRSExample {

  /**
   * An example resource
   */
  @XmlRootElement
  public static class JAXBExample {

    /**
     * The resource ID
     */
    @XmlID
    @XmlElement
    String id;

    /**
     * The example contents
     */
    @XmlValue
    String contents;

    /**
     * An optional attribute
     */
    @XmlAttribute
    String type;
  }

  /**
   * Gets an example resource
   * 
   * @param id
   *          the example id
   * @param type
   *          the type of resource we prefer
   * @param startIndex
   *          the start index
   * @return an example resource suitable for the given parameters
   * @HTTP 404 if there is no such example resource
   * @RequestHeader X-Example-Auth the authentication header
   * @ResponseHeader Location a pointer to the example details
   */
  @Path("{id}")
  @GET
  public JAXBExample getExample(@PathParam("id") String id, 
                                @MatrixParam("type") String type, 
                                @QueryParam("start") int startIndex) {
    return new JAXBExample();
  }
}
{code}
{example}

!images/jaxrs-example.png|title=Result of documented JAX-RS code!
!images/jaxb-example.png|title=Result of documented JAXB code!

Here is an example of documented JPA code:

{example:title=Example of documented JPA code}
{code:java}
package com.lunatech.doclets.jax.test.jpa;

import java.util.List;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.Transient;

/**
 * This is the order type.
 * 
 * @author stephane
 */
@Entity
public class Order {

  /**
   * This is my ID and I love it
   */
  @Id
  @GeneratedValue
  public Long id;

  /**
   * Column with an explicit name
   */
  @Column(name = "column_with_name")
  public String columnWithName;

  /**
   * Column with an annotation
   */
  @Column
  public String columnWithAnnotation;

  /**
   * Column with no annotation
   */
  public String columnWithoutAnnotation;

  /**
   * Transient property
   */
  public transient String transientColumn;

  /**
   * Transient property
   */
  @Transient
  public String transientAnnotatedColumn;

  /**
   * A Bill
   */
  @JoinColumn(name = "bill_id")
  @OneToOne
  public Bill bill;

  /**
   * A list of Orderlines
   */
  @OneToMany(mappedBy = "order")
  public List<Orderline> orderlineList;

  /**
   * A set of Orderlines
   */
  @OneToMany(mappedBy = "order")
  public Set<Orderline> orderlineSet;

  /**
   * A set of Items, via a link table
   */
  @JoinTable(name = "order2item", 
             joinColumns = @JoinColumn(name = "item_id"),
             inverseJoinColumns = @JoinColumn(name = "order_id"))
  @ManyToMany
  public Set<Item> itemSet;
}
{code}
{example}

!images/jpa-example.png|title=Result of documented JPA code!
